package io.github.burakkaygusuz.scanner;

import io.github.burakkaygusuz.analyzer.FormAnalyzer;
import io.github.burakkaygusuz.analyzer.JSoupFormAnalyzer;
import io.github.burakkaygusuz.config.ScannerConfig;
import io.github.burakkaygusuz.detector.CsrfDetector;
import io.github.burakkaygusuz.detector.DetectorFactory;
import io.github.burakkaygusuz.detector.VulnerabilityDetector;
import io.github.burakkaygusuz.model.FormData;
import io.github.burakkaygusuz.service.HttpClientService;
import io.github.burakkaygusuz.service.ReportService;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import okhttp3.Response;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Component;

@Component
public class VulnerabilityScanner {

  private static final Logger logger = LoggerFactory.getLogger(VulnerabilityScanner.class);

  private final List<VulnerabilityDetector> detectors;
  private final FormAnalyzer formAnalyzer;
  private final HttpClientService httpClientService;
  private final ExecutorService executor;
  private final CsrfDetector csrfDetector;

  public VulnerabilityScanner(
      ScannerConfig config,
      HttpClientService httpClientService,
      ReportService reportService,
      ExecutorService executor,
      DetectorFactory detectorFactory) {
    this.httpClientService = httpClientService;
    this.executor = executor;

    // Use injected DetectorFactory to create all detectors
    this.detectors = detectorFactory.createAllDetectors();

    // Keep separate CSRF detector for form analysis
    this.csrfDetector = new CsrfDetector(config.csrfSettings(), httpClientService, reportService);
    this.formAnalyzer = new JSoupFormAnalyzer(config.csrfSettings());
  }

  public void scanUrl(String url) {
    // Submit all detectors for execution
    for (VulnerabilityDetector detector : detectors) {
      executor.submit(() -> detector.detect(url));
    }

    // Special handling for CSRF forms analysis
    executor.submit(() -> scanForCsrfVulnerabilities(url));
  }

  /**
   * Scans a URL for CSRF vulnerabilities by analyzing forms on the page.
   *
   * @param url the URL to scan
   */
  private void scanForCsrfVulnerabilities(String url) {
    try (Response response = httpClientService.executeRequest(url); ) {
      if (!response.isSuccessful()) {
        return;
      }

      String htmlContent = httpClientService.safeReadResponse(response);
      if (htmlContent.isEmpty()) {
        return;
      }

      List<FormData> forms = formAnalyzer.analyzeForms(htmlContent, url);
      if (!forms.isEmpty()) {
        csrfDetector.checkCsrfProtection(forms, url);
      }
    } catch (Exception e) {
      logger.warn("Error scanning CSRF vulnerabilities on {}: {}", url, e.getMessage());
    }
  }

  public void shutdown() {
    executor.shutdown();
  }

  public ExecutorService getExecutor() {
    return executor;
  }

  @Configuration
  public static class ExecutorConfig {
    @Bean
    public ExecutorService executorService() {
      return Executors.newVirtualThreadPerTaskExecutor();
    }
  }
}
