package io.github.burakkaygusuz;

import org.junit.jupiter.api.Test;
import org.assertj.core.api.SoftAssertions;
import static org.assertj.core.api.Assertions.*;

class VulnerabilityTest {

    @Test
    void testVulnerabilityCreation() {
        Vulnerability vulnerability = new Vulnerability(
            "SQL Injection", 
            "https://example.com", 
            "id", 
            "' OR 1=1--"
        );
        
        SoftAssertions.assertSoftly(softly -> {
            softly.assertThat(vulnerability.type()).isEqualTo("SQL Injection");
            softly.assertThat(vulnerability.url()).isEqualTo("https://example.com");
            softly.assertThat(vulnerability.parameter()).isEqualTo("id");
            softly.assertThat(vulnerability.payload()).isEqualTo("' OR 1=1--");
        });
    }

    @Test
    void testSqlInjectionSeverity() {
        Vulnerability vulnerability = new Vulnerability(
            "SQL Injection", 
            "https://example.com", 
            "id", 
            "' OR 1=1--"
        );
        
        assertThat(vulnerability)
            .extracting(Vulnerability::getSeverity, Vulnerability::getSeverityScore)
            .containsExactly(Vulnerability.CRITICAL, 4);
    }

    @Test
    void testXssSeverity() {
        Vulnerability vulnerability = new Vulnerability(
            "Cross-Site Scripting (XSS)", 
            "https://example.com", 
            "search", 
            "<script>alert('XSS')</script>"
        );
        
        assertThat(vulnerability)
            .extracting(Vulnerability::getSeverity, Vulnerability::getSeverityScore)
            .containsExactly(Vulnerability.HIGH, 3);
    }

    @Test
    void testSensitiveInfoSeverity() {
        Vulnerability vulnerability = new Vulnerability(
            "Sensitive Information Exposure", 
            "https://example.com", 
            "email", 
            "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}"
        );
        
        assertThat(vulnerability)
            .extracting(Vulnerability::getSeverity, Vulnerability::getSeverityScore)
            .containsExactly(Vulnerability.MEDIUM, 2);
    }

    @Test
    void testUnknownTypeSeverity() {
        Vulnerability vulnerability = new Vulnerability(
            "Unknown Type", 
            "https://example.com", 
            "param", 
            "payload"
        );
        
        assertThat(vulnerability)
            .extracting(Vulnerability::getSeverity, Vulnerability::getSeverityScore)
            .containsExactly(Vulnerability.LOW, 1);
    }

    @Test
    void testVulnerabilityWithNullValues() {
        Vulnerability vulnerability = new Vulnerability(
            "SQL Injection", 
            "https://example.com", 
            null, 
            null
        );

        assertThat(vulnerability)
            .extracting(Vulnerability::parameter, Vulnerability::payload, Vulnerability::getSeverity)
            .containsExactly(null, null, Vulnerability.CRITICAL);
    }

    @Test
    void testVulnerabilityEquality() {
        Vulnerability vuln1 = new Vulnerability("SQL Injection", "https://example.com", "id", "' OR 1=1--");
        Vulnerability vuln2 = new Vulnerability("SQL Injection", "https://example.com", "id", "' OR 1=1--");
        Vulnerability vuln3 = new Vulnerability("XSS", "https://example.com", "id", "' OR 1=1--");
        
        assertThat(vuln1).isEqualTo(vuln2)
                         .hasSameHashCodeAs(vuln2)
                         .isNotEqualTo(vuln3);
    }

    @Test
    void testSeverityConstants() {
        SoftAssertions.assertSoftly(softly -> {
            softly.assertThat(Vulnerability.LOW).isEqualTo("LOW");
            softly.assertThat(Vulnerability.MEDIUM).isEqualTo("MEDIUM");
            softly.assertThat(Vulnerability.HIGH).isEqualTo("HIGH");
            softly.assertThat(Vulnerability.CRITICAL).isEqualTo("CRITICAL");
            softly.assertThat(Vulnerability.SEVERITIES)
                  .containsExactly("LOW", "MEDIUM", "HIGH", "CRITICAL");
        });
    }
}
