package io.github.burakkaygusuz.model;

import static org.assertj.core.api.Assertions.*;

import org.assertj.core.api.SoftAssertions;
import org.junit.jupiter.api.Test;

class VulnerabilityTypeTest {

  @Test
  void testSqlInjectionType() {
    VulnerabilityType type = VulnerabilityType.SQL_INJECTION;

    SoftAssertions.assertSoftly(
        softly -> {
          softly.assertThat(type.getDisplayName()).isEqualTo("SQL Injection");
          softly
              .assertThat(type.getDescription())
              .isEqualTo("Database queries vulnerable to malicious SQL code injection");
          softly.assertThat(type.getSeverity()).isEqualTo("CRITICAL");
          softly.assertThat(type.getSeverityScore()).isEqualTo(4);
        });
  }

  @Test
  void testCrossSiteScriptingType() {
    VulnerabilityType type = VulnerabilityType.CROSS_SITE_SCRIPTING;

    SoftAssertions.assertSoftly(
        softly -> {
          softly.assertThat(type.getDisplayName()).isEqualTo("Cross-Site Scripting (XSS)");
          softly
              .assertThat(type.getDescription())
              .isEqualTo("Web pages vulnerable to malicious script injection");
          softly.assertThat(type.getSeverity()).isEqualTo("HIGH");
          softly.assertThat(type.getSeverityScore()).isEqualTo(3);
        });
  }

  @Test
  void testCsrfRelatedTypes() {
    SoftAssertions.assertSoftly(
        softly -> {
          softly.assertThat(VulnerabilityType.NO_CSRF_TOKEN.getSeverity()).isEqualTo("HIGH");
          softly.assertThat(VulnerabilityType.INVALID_CSRF_TOKEN.getSeverity()).isEqualTo("HIGH");
          softly.assertThat(VulnerabilityType.REUSED_CSRF_TOKEN.getSeverity()).isEqualTo("HIGH");
          softly.assertThat(VulnerabilityType.EXPIRED_CSRF_TOKEN.getSeverity()).isEqualTo("MEDIUM");
          softly
              .assertThat(VulnerabilityType.WEAK_REFERER_VALIDATION.getSeverity())
              .isEqualTo("MEDIUM");
        });
  }

  @Test
  void testFromDisplayNameMethod() {
    SoftAssertions.assertSoftly(
        softly -> {
          softly
              .assertThat(VulnerabilityType.fromDisplayName("SQL Injection"))
              .isEqualTo(VulnerabilityType.SQL_INJECTION);
          softly
              .assertThat(VulnerabilityType.fromDisplayName("Cross-Site Scripting (XSS)"))
              .isEqualTo(VulnerabilityType.CROSS_SITE_SCRIPTING);
          softly
              .assertThat(VulnerabilityType.fromDisplayName("No CSRF Token"))
              .isEqualTo(VulnerabilityType.NO_CSRF_TOKEN);
          softly
              .assertThat(VulnerabilityType.fromDisplayName("Unknown Type"))
              .isEqualTo(VulnerabilityType.UNKNOWN);
          softly
              .assertThat(VulnerabilityType.fromDisplayName(null))
              .isEqualTo(VulnerabilityType.UNKNOWN);
        });
  }

  @Test
  void testSeverityScoreMapping() {
    SoftAssertions.assertSoftly(
        softly -> {
          softly.assertThat(VulnerabilityType.SQL_INJECTION.getSeverityScore()).isEqualTo(4);
          softly.assertThat(VulnerabilityType.CROSS_SITE_SCRIPTING.getSeverityScore()).isEqualTo(3);
          softly.assertThat(VulnerabilityType.NO_CSRF_TOKEN.getSeverityScore()).isEqualTo(3);
          softly.assertThat(VulnerabilityType.EXPIRED_CSRF_TOKEN.getSeverityScore()).isEqualTo(2);
          softly
              .assertThat(VulnerabilityType.SENSITIVE_INFO_EXPOSURE.getSeverityScore())
              .isEqualTo(2);
          softly.assertThat(VulnerabilityType.UNKNOWN.getSeverityScore()).isEqualTo(1);
        });
  }

  @Test
  void testAllTypesHaveValidSeverity() {
    for (VulnerabilityType type : VulnerabilityType.values()) {
      assertThat(type.getSeverity()).isIn("LOW", "MEDIUM", "HIGH", "CRITICAL");
      assertThat(type.getSeverityScore()).isBetween(1, 4);
      assertThat(type.getDisplayName()).isNotNull().isNotEmpty();
      assertThat(type.getDescription()).isNotNull().isNotEmpty();
    }
  }
}
