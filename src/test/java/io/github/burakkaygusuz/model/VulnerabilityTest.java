package io.github.burakkaygusuz.model;

import static org.assertj.core.api.Assertions.*;

import org.assertj.core.api.SoftAssertions;
import org.junit.jupiter.api.Test;

class VulnerabilityTest {

  @Test
  void testVulnerabilityCreation() {
    Vulnerability vulnerability =
        new Vulnerability("SQL Injection", "https://example.com", "id", "' OR 1=1--");

    SoftAssertions.assertSoftly(
        softly -> {
          softly.assertThat(vulnerability.type()).isEqualTo(VulnerabilityType.SQL_INJECTION);
          softly.assertThat(vulnerability.getTypeName()).isEqualTo("SQL Injection");
          softly.assertThat(vulnerability.url()).isEqualTo("https://example.com");
          softly.assertThat(vulnerability.parameter()).isEqualTo("id");
          softly.assertThat(vulnerability.payload()).isEqualTo("' OR 1=1--");
        });
  }

  @Test
  void testVulnerabilityCreationWithEnum() {
    Vulnerability vulnerability =
        new Vulnerability(
            VulnerabilityType.SQL_INJECTION, "https://example.com", "id", "' OR 1=1--");

    SoftAssertions.assertSoftly(
        softly -> {
          softly.assertThat(vulnerability.type()).isEqualTo(VulnerabilityType.SQL_INJECTION);
          softly.assertThat(vulnerability.getTypeName()).isEqualTo("SQL Injection");
          softly
              .assertThat(vulnerability.getTypeDescription())
              .isEqualTo("Database queries vulnerable to malicious SQL code injection");
          softly.assertThat(vulnerability.url()).isEqualTo("https://example.com");
          softly.assertThat(vulnerability.parameter()).isEqualTo("id");
          softly.assertThat(vulnerability.payload()).isEqualTo("' OR 1=1--");
        });
  }

  @Test
  void testSqlInjectionSeverity() {
    Vulnerability vulnerability =
        new Vulnerability("SQL Injection", "https://example.com", "id", "' OR 1=1--");

    assertThat(vulnerability)
        .extracting(Vulnerability::getSeverity, Vulnerability::getSeverityScore)
        .containsExactly(Severity.CRITICAL.getName(), 4);
  }

  @Test
  void testXssSeverity() {
    Vulnerability vulnerability =
        new Vulnerability(
            "Cross-Site Scripting (XSS)",
            "https://example.com",
            "search",
            "<script>alert('XSS')</script>");

    assertThat(vulnerability)
        .extracting(Vulnerability::getSeverity, Vulnerability::getSeverityScore)
        .containsExactly(Severity.HIGH.getName(), 3);
  }

  @Test
  void testSensitiveInfoSeverity() {
    Vulnerability vulnerability =
        new Vulnerability(
            "Sensitive Information Exposure",
            "https://example.com",
            "email",
            "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}");

    assertThat(vulnerability)
        .extracting(Vulnerability::getSeverity, Vulnerability::getSeverityScore)
        .containsExactly(Severity.MEDIUM.getName(), 2);
  }

  @Test
  void testUnknownTypeSeverity() {
    Vulnerability vulnerability =
        new Vulnerability("Unknown Type", "https://example.com", "param", "payload");

    assertThat(vulnerability)
        .extracting(Vulnerability::getSeverity, Vulnerability::getSeverityScore)
        .containsExactly(Severity.LOW.getName(), 1);
  }

  @Test
  void testVulnerabilityWithNullValues() {
    Vulnerability vulnerability =
        new Vulnerability("SQL Injection", "https://example.com", null, null);

    assertThat(vulnerability)
        .extracting(Vulnerability::parameter, Vulnerability::payload, Vulnerability::getSeverity)
        .containsExactly(null, null, Severity.CRITICAL.getName());
  }

  @Test
  void testVulnerabilityEquality() {
    Vulnerability vuln1 =
        new Vulnerability("SQL Injection", "https://example.com", "id", "' OR 1=1--");
    Vulnerability vuln2 =
        new Vulnerability("SQL Injection", "https://example.com", "id", "' OR 1=1--");
    Vulnerability vuln3 = new Vulnerability("XSS", "https://example.com", "id", "' OR 1=1--");

    assertThat(vuln1).isEqualTo(vuln2).hasSameHashCodeAs(vuln2).isNotEqualTo(vuln3);
  }

  @Test
  void testSeverityConstants() {
    SoftAssertions.assertSoftly(
        softly -> {
          softly.assertThat(Severity.LOW.getName()).isEqualTo("LOW");
          softly.assertThat(Severity.MEDIUM.getName()).isEqualTo("MEDIUM");
          softly.assertThat(Severity.HIGH.getName()).isEqualTo("HIGH");
          softly.assertThat(Severity.CRITICAL.getName()).isEqualTo("CRITICAL");
          softly
              .assertThat(Severity.getAllNames())
              .containsExactly("LOW", "MEDIUM", "HIGH", "CRITICAL");
        });
  }
}
