package io.github.burakkaygusuz.scanner;

import static org.assertj.core.api.Assertions.*;

import io.github.burakkaygusuz.config.ScannerConfig;
import io.github.burakkaygusuz.detector.DetectorFactory;
import io.github.burakkaygusuz.service.HttpClientService;
import io.github.burakkaygusuz.service.ReportService;
import java.util.concurrent.ExecutorService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.TestPropertySource;

@SpringBootTest
@TestPropertySource(
    properties = {
      "scanner.sqlPayloads[0]='",
      "scanner.xssPayloads[0]=<script>alert('XSS')</script>",
      "scanner.sensitivePatterns.email=[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}",
      "scanner.scanSettings.maxDepth=2",
      "scanner.scanSettings.timeoutSeconds=10",
      "scanner.csrfSettings.testForms=true",
      "scanner.csrfSettings.minimumTokenLength=8"
    })
class VulnerabilityScannerIntegrationTest {

  @Autowired private ScannerConfig scannerConfig;

  @Autowired private HttpClientService httpClientService;

  @Autowired private ReportService reportService;

  @Autowired private ExecutorService executorService;

  @Autowired private DetectorFactory detectorFactory;

  @Test
  void testVulnerabilityScannerDependencyInjection() {
    assertThat(scannerConfig).isNotNull();
    assertThat(httpClientService).isNotNull();
    assertThat(reportService).isNotNull();
    assertThat(executorService).isNotNull();
    assertThat(detectorFactory).isNotNull();
  }

  @Test
  void testVulnerabilityScannerCreation() {
    VulnerabilityScanner scanner =
        new VulnerabilityScanner(
            scannerConfig, httpClientService, reportService, executorService, detectorFactory);

    assertThat(scanner).isNotNull();
    assertThat(scanner.getExecutor()).isNotNull();
  }

  @Test
  void testDetectorFactoryCreatesDetectors() {
    var detectors = detectorFactory.createAllDetectors();

    assertThat(detectors).isNotEmpty();
    assertThat(detectors).hasSize(4); // SQL, XSS, SensitiveInfo, CSRF
  }

  @Test
  void testConfigurationPropertiesLoaded() {
    assertThat(scannerConfig.getSqlPayloads()).isNotEmpty();
    assertThat(scannerConfig.getXssPayloads()).isNotEmpty();
    assertThat(scannerConfig.getSensitivePatterns()).isNotEmpty();
    assertThat(scannerConfig.getScanSettings()).isNotNull();
    assertThat(scannerConfig.getCsrfSettings()).isNotNull();
  }
}
